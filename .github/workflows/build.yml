name: Build & Lint

on:
  push:
  pull_request:
  schedule:
    - cron: "0 3-22/3 * * *"

env:
  JAVA_VERSION: 12.x
  FLUTTER_CHANNEL: stable
  FLUTTER_VERSION: 1.22.x

jobs:
  install:
    name: Install Flutter & dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v1

      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install dependencies
        run: flutter pub get

      - name: Run code generator(s)
        run: |
          flutter pub run intl_utils:generate
          flutter pub run build_runner build

      - name: Remove obsolete files
        run: |
          rm -rf ./.dart_tool/pub/bin/build_runner
      - name: Persist current state
        uses: actions/upload-artifact@v1
        with:
          name: source
          path: .

  lint:
    name: Lint
    needs: install
    runs-on: ubuntu-latest
    steps:
      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Checkout source
        uses: actions/download-artifact@v1
        with:
          name: source
          path: .

      - name: Run linter
        run: flutter analyze > flutter_analyze_report.txt
        continue-on-error: true

      - name: Install ruby
        uses: actions/setup-ruby@v1
        if: github.event_name == 'pull_request'
        with:
          ruby-version: "2.6"
      - name: Install ruby gems
        run: |
          gem install bundler
          bundle install --without documentation
        if: github.event_name == 'pull_request'
      - name: Run danger on generated report
        uses: MeilCli/danger-action@v5
        if: github.event_name == 'pull_request'
        with:
          danger_file: Dangerfile
          danger_id: "danger-pr"
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-api:
    name: Run API tests
    needs: install
    runs-on: ubuntu-latest
    if: "false" # github.event_name == 'push' || github.event_name == 'schedule'
    steps:
      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Checkout source
        uses: actions/download-artifact@v1
        with:
          name: source
          path: .

      - name: Run API tests
        # Limit concurrency to prevent 429 errors.
        run: flutter test --concurrency 1 --name "^/.+$"
        env:
          SC_AT_TEACHER_EMAIL: ${{ secrets.API_TEST_TEACHER_EMAIL }}
          SC_AT_TEACHER_PASSWORD: ${{ secrets.API_TEST_TEACHER_PASSWORD }}
          SC_AT_STUDENT_EMAIL: ${{ secrets.API_TEST_STUDENT_EMAIL }}
          SC_AT_STUDENT_PASSWORD: ${{ secrets.API_TEST_STUDENT_PASSWORD }}

  build:
    name: Build
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavor: ["sc", "sc_test", "brb", "n21", "nbc_audit", "open", "thr"]
      fail-fast: false
    steps:
      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Checkout source
        uses: actions/download-artifact@v1
        with:
          name: source
          path: .

      - run: flutter build apk --target=lib/main_${{ matrix.flavor }}.dart --flavor=${{ matrix.flavor }}
        env:
          RELEASE_USE_DEBUG_KEY: true

      - name: Upload APK as artifact
        uses: actions/upload-artifact@v1
        with:
          name: apk-${{ matrix.flavor }}
          path: build/app/outputs/apk/${{ matrix.flavor }}/release

  # TODO(JonasWanke): enable screenshots when this issue is fixed: https://github.com/flutter/flutter/issues/36244
  # generate-screenshots:
  #   name: Generate screenshots
  #   needs: install
  #   # We have to use macOS for hardware acceleration on Android emulators
  #   runs-on: macos-10.15
  #   strategy:
  #     matrix:
  #       flavor: ["sc"]
  #     fail-fast: false
  #   steps:
  #     - name: Install Java 12
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: ${{ env.JAVA_VERSION }}
  #     - name: Install Flutter (stable)
  #       uses: subosito/flutter-action@v1
  #       with:
  #         channel: ${{ env.FLUTTER_CHANNEL }}
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #     - name: Checkout source
  #       uses: actions/download-artifact@v1
  #       with:
  #         name: source
  #         path: .
  #     - name: Install Java 10
  #       uses: actions/setup-java@v1
  #       with:
  #         java-version: 10
  #     - name: Create virtual device
  #       run: |
  #         ~/Library/Android/sdk/tools/bin/sdkmanager "system-images;android-28;default;x86"
  #         echo no | ~/Library/Android/sdk/tools/bin/avdmanager --verbose create avd --force --name "Pixel_XL" --package "system-images;android-28;default;x86" --device "pixel_xl"
  #       env:
  #         JDK_JAVA_OPTIONS: "--add-modules java.xml.bind"
  #     - name: Install screenshots package
  #       run: |
  #         brew update && brew install imagemagick
  #         flutter pub global activate screenshots
  #     - name: Take screenshots
  #       run: flutter pub global run screenshots:main -v -f sc
  #     - name: Upload screenshots as artifact
  #       uses: actions/upload-artifact@v1
  #       with:
  #         name: screenshots-${{ matrix.flavor }}
  #         path: android/fastlane/metadata/android
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: tmp-screenshots
  #         path: /tmp/screenshots

  deploy-canary:
    name: Deploy canary
    needs: install
    runs-on: ubuntu-latest
    strategy:
      matrix:
        flavor: ["sc"]
      fail-fast: false
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Install Java 12
        uses: actions/setup-java@v1
        with:
          java-version: ${{ env.JAVA_VERSION }}
      - name: Install Flutter (stable)
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          flutter-version: ${{ env.FLUTTER_VERSION }}
      - name: Checkout source
        uses: actions/download-artifact@v1
        with:
          name: source
          path: .

      - name: Store Google Play credentials in a file
        run: echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_KEY }}" | base64 --decode > ./android/fastlane/googlePlay-serviceAccount.json
      - name: Store Google Play upload key in a file
        run: echo "${{ secrets.GOOGLE_PLAY_UPLOAD_KEY }}" | base64 --decode > ./android/upload.keystore.jks

      - id: unicorn
        name: Determine new version & generate changelog
        uses: JonasWanke/unicorn@ad66dae
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
      - name: Build AAB
        run: |
          flutter build appbundle \
            --flavor=sc \
            --build-number=${{ steps.unicorn.outputs.versionCode }} \
            --build-name=${{ steps.unicorn.outputs.version }}
        env:
          UPLOAD_KEY_STORE_PASSWORD: ${{ secrets.GOOGLE_PLAY_UPLOAD_KEY_STORE_PASSWORD }}
          UPLOAD_KEY_KEY_PASSWORD: ${{ secrets.GOOGLE_PLAY_UPLOAD_KEY_KEY_PASSWORD }}
        # Flutter doesn't find the generated .aab-file, but it should
        continue-on-error: true
      - name: Deploy to Google Play (internal track)
        uses: maierj/fastlane-action@v1.4.0
        with:
          lane: uploadCanary
          subdirectory: android
